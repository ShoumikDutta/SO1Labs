#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES 
void clearBuffer()
{
	while (getchar() != '\n');
}
typedef struct Point{
  int x;
  int y;
} Point;

void memoryAllocationCheck(int* ptr)
{
	if (ptr == NULL) //need stdlib
	{
		exit(EXIT_FAILURE);

	}
}

void function(char *myString)
{
  for (size_t i = 0; i < strlen(myString); i++) {
    // Access each char in the string
    printf("myString[%lu] = %c\n", i, myString[i]);
  }
}
(void)getchar(); //works with scanf as well


//quick sort
#include <stdio.h>

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Choose the last element as the pivot
    int i = low - 1;        // Index of the smaller element

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap arr[i+1] and arr[high] to place the pivot in the correct position
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1;  // Return the pivot index
}

// Function to implement the Quick Sort algorithm
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Find the pivot index such that elements on the left are smaller and elements on the right are larger
        int pivotIndex = partition(arr, low, high);

        // Recursively sort the sub-arrays
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Example usage
int main() {
    int arr[] = {12, 7, 11, 5, 2, 6};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, size);

    quickSort(arr, 0, size - 1);

    printf("Sorted array: ");
    printArray(arr, size);

    return 0;
}

// bubble sort
#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j + 1]
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, n);

    bubbleSort(arr, n);

    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}

//files
File Pointers:

c
Copy code
FILE *filePointer;
Opening a File:

c
Copy code
filePointer = fopen("filename.txt", "mode");
// "mode" can be "r" (read), "w" (write), "a" (append), "r+" (read and write), "w+" (read and write, creates or truncates), "a+" (read and write, creates or appends)
Checking if File Opened Successfully:

c
Copy code
if (filePointer == NULL) {
    // Handle error (e.g., print an error message and exit)
}
Closing a File:

c
Copy code
fclose(filePointer);
Reading from a File:

c
Copy code
int ch;
while ((ch = fgetc(filePointer)) != EOF) {
    // Process each character (ch)
}
Writing to a File:

c
Copy code
fprintf(filePointer, "Hello, World!\n");
Reading a Line from a File:

c
Copy code
char buffer[255];
while (fgets(buffer, sizeof(buffer), filePointer) != NULL) {
    // Process each line (stored in buffer)
}
Writing a Line to a File:

c
Copy code
fprintf(filePointer, "This is a line of text.\n");
Moving File Position Indicator (Seeking):

c
Copy code
fseek(filePointer, offset, SEEK_SET);
// offset: number of bytes to move the position indicator
// SEEK_SET: from the beginning of the file
// SEEK_CUR: from the current position
// SEEK_END: from the end of the file
Checking End of File:
c
Copy code
while (!feof(filePointer)) {
    // Continue reading until the end of the file is reached
}
Error Handling:
c
Copy code
perror("Error message");
